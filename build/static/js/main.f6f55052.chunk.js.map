{"version":3,"sources":["affirmLogo.svg","features/welcomeBanner.js","constants/actionTypes.js","actions/appActions.js","features/affirmations.js","features/frontPage.js","reducer/appReducer.js","stores/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WelcomeBanner","props","state","error","isLoaded","src","logo","className","alt","Component","connect","fetchAffirmation","dispatch","fetch","method","headers","mode","then","response","ok","Error","statusText","json","res","type","actionTypes","affirmation","catch","e","console","log","Affirmations","message","to","body","prevNum","submitting","onSubmit","bind","onHandleChange","getFormattedPhoneNum","regenerate","event","name","target","getAttribute","this","setState","value","lastEndChar","test","charAt","length","updateValue","replace","isNaN","substring","data","JSON","stringify","input","output","match","g1","g2","g3","onClick","id","placeholder","onChange","disabled","app","FrontPage","enter","handleTimer","style","height","window","innerHeight","initialState","persistConfig","key","storage","stateReconciler","autoMergeLevel2","reduxLogger","createLogger","diff","middlewares","thunk","store","createStore","persistReducer","combineReducers","action","updated","Object","assign","constants","applyMiddleware","persistStore","App","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6f55052.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/affirmLogo.7a9fd30e.svg\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from '../affirmLogo.svg'\n\nclass WelcomeBanner extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            error : null,\n            isLoaded : true,\n        };\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n\n        return(\n            <div>\n                <h1>The Daily Burger</h1>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n\n    }\n}\n\nexport default connect(mapStateToProps)(WelcomeBanner);","export default {\n    FETCH_AFFIRMATION: 'FETCH_AFFIRMATION',\n    SEND_AFFIRMATION: 'SEND_AFFIRMATION',\n}","import actionTypes from '../constants/actionTypes';\n\n\nfunction affirmationFetched(affirm){\n    return {\n        type: actionTypes.FETCH_AFFIRMATION,\n        affirmation: affirm.affirmation\n    }\n}\n\nexport function fetchAffirmation(){\n\n    return dispatch => {\n        return fetch(`http://localhost:8000/affirmations`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            mode: 'cors'})\n            .then( (response) => {\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then( (res) => {\n                dispatch(affirmationFetched(res));\n                return res;\n            })\n            .catch( (e) => console.log(e) )\n    }\n}\n\nexport function sendAffirmation(data){\n\n    return dispatch => {\n        return fetch(`http://localhost:8000/affirmations`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n            mode: 'cors'})\n            .then( (response) => {\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then( (res) => {\n                // dispatch(affirmationFetched(res));\n                return res;\n            })\n            .catch( (e) => console.log(e) )\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { fetchAffirmation, sendAffirmation } from './../actions/appActions'\n\n// var affirmations = [\n//     \"Today you woke up and that is a victory.\",\n//     \"You are loved.\",\n//     \"Don't forget to extend to yourself grace.\",\n//     \"You are valuable.\",\n//     \"You will survive this.\",\n//\n// ]\n\nclass Affirmations extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: {\n                to: '',\n                body: ''\n            },\n            prevNum: '',\n            submitting: false,\n            error: false\n        };\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.onHandleChange = this.onHandleChange.bind(this)\n        this.getFormattedPhoneNum = this.getFormattedPhoneNum.bind(this)\n        this.regenerate = this.regenerate.bind(this)\n    }\n\n    onHandleChange(event) {\n        const name = event.target.getAttribute('name');\n        switch (name) {\n            case \"body\":\n                this.setState({\n                    message: { ...this.state.message, [name]: event.target.value }\n                });\n                break;\n            case \"to\":\n                let lastEndChar = this.state.prevNum;\n                this.setState({prevNum:event.target.value})\n                let test = event.target.value.charAt(event.target.value.length - 1)\n                let updateValue = event.target.value.replace(/\\D/g,'');\n                if(isNaN(test) && isNaN(lastEndChar)){\n                    updateValue = updateValue.substring(0, updateValue.length-1);\n                }else{\n\n                }\n                this.setState({\n                    message: { ...this.state.message, [name]: updateValue }\n                });\n                break;\n            default:\n                break;\n        }\n        console.log(this.state.message.to)\n    }\n\n    onSubmit(event) {\n        const { dispatch } = this.props;\n        dispatch(sendAffirmation(this.state.message))\n    }\n\n    componentDidMount() {\n        this.regenerate()\n    }\n\n    regenerate(){\n        const { dispatch } = this.props;\n        dispatch(fetchAffirmation()).then(\n            this.setState({\n                message: { ...this.state.message, body: this.props.affirmation }\n            })\n        )\n    }\n\n    getFormattedPhoneNum( input ) {\n        let output = \"\";\n        (this.state.message.to !== \"\")? output = \"(\" : output = \"\"\n        input.replace( /^\\D*(\\d{0,3})\\D*(\\d{0,3})\\D*(\\d{0,4})/, function( match, g1, g2, g3 )\n            {\n                if ( g1.length ) {\n                    output += g1;\n                    if ( g1.length === 3 ) {\n                        output += \")-\";\n                        if ( g2.length ) {\n                            output += \"\" + g2;\n                            if ( g2.length === 3 ) {\n                                output += \"-\";\n                                if ( g3.length ) {\n                                    output += g3;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        );\n        return output;\n    }\n\n    render() {\n        return (\n            <div className={this.state.error ? 'error sms-form' : 'sms-form'}>\n                Sometimes we find ourselves at a loss for words.\n                <h4>\"{this.props.affirmation}\"</h4>\n                <div>\n                    <div className={\"affirm-buttons\"}>\n                        <div>\n                            <button className=\"regenerate\" type=\"regenerate\" onClick={this.regenerate}>\n                                Regenerate\n                            </button>\n                        </div>\n                    </div>\n                    <div>\n                        <input\n                            type=\"tel\"\n                            name=\"to\"\n                            id=\"to\"\n                            placeholder=\"(123)-456-7890\"\n                            value={this.getFormattedPhoneNum(this.state.message.to)}\n                            onChange={this.onHandleChange}\n                        />\n                    </div>\n                    <div className={\"affirm-buttons\"}>\n                        <button className=\"submit\" type=\"submit\" disabled={this.state.submitting} onClick={this.onSubmit}>\n                            Send\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        affirmation: state.app.affirmation\n    }\n}\n\nexport default connect(mapStateToProps)(Affirmations);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css';\nimport WelcomeBanner from \"./welcomeBanner\";\nimport Affirmations from \"./affirmations\";\n\nclass FrontPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            enter: true\n        };\n        this.handleTimer = this.handleTimer.bind(this)\n    }\n    handleTimer(){\n        this.setState({enter:true});\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <div style={{height:window.innerHeight/16}}/>\n                <WelcomeBanner/>\n                <Affirmations/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n\n    }\n}\n\nexport default connect(mapStateToProps)(FrontPage);\n","import constants from '../constants/actionTypes'\n\nvar initialState = {\n    affirmation: '',\n}\n\nexport default (state = initialState, action) => {\n    var updated = Object.assign({}, state);\n    switch(action.type) {\n\n        case constants.FETCH_AFFIRMATION:\n            updated['affirmation'] = action.affirmation\n            return updated;\n\n        case constants.SEND_AFFIRMATION:\n            return state;\n\n        default:\n            return state;\n    }\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport appReducer from \"../reducer/appReducer\";\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: storage,\r\n  stateReconciler: autoMergeLevel2 // see \"Merge Process\" section for details.\r\n};\r\n\r\nconst reduxLogger = createLogger({ diff: true });\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  const { logger } = require('redux-logger');\r\n\r\n  middlewares.push(logger);\r\n}\r\n\r\nconst store = createStore(\r\n    persistReducer(persistConfig,\r\n        combineReducers( {\r\n          app: appReducer,\r\n        })\r\n    ),\r\n    applyMiddleware(\r\n        reduxLogger,\r\n        ...middlewares\r\n    )\r\n);\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default store;","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux'\r\nimport FrontPage from './features/frontPage'\r\nimport store from './stores/store'\r\n\r\nfunction App() {\r\n  return (\r\n      <div>\r\n        <Provider store={store}>\r\n          <FrontPage />\r\n        </Provider>\r\n      </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './stores/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}